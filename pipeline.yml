---
# GROUPS
groups:
  - name: tests
    jobs: [ run-unit-tests, build-artifact, run-integration-tests ]
  - name: deployment
    jobs: [ deploy-application, run-load-tests, promote-new-version ]

# RESOURCES
resources:

  # Pipeline
  - name: pipeline-repo
    type: git
    source:
      uri: {{github-pipeline-uri}}
      branch: {{github-pipeline-branch}}

  # Application
  - name: application-repo
    type: git
    source:
      uri: {{github-application-uri}}
      branch: {{github-application-branch}}

  # Version
  - name: version
    type: semver
    source:
      region_name: {{s3-region}}
      bucket: {{s3-bucket-version}}
      initial_version: {{initial-version}}
      key: {{s3-bucket-version-key}}
      access_key_id: {{s3-access-key-id}}
      secret_access_key: {{s3-secret-access-key}}
      endpoint: {{s3-endpoint}}

  # Release Candidate
  - name: release-candidate
    type: s3
    source:
      region_name: {{s3-region}}
      bucket: {{s3-bucket-release-candidates}}
      regexp: {{s3-bucket-release-regexp}}
      access_key_id: {{s3-access-key-id}}
      secret_access_key: {{s3-secret-access-key}}
      endpoint: {{s3-endpoint}}

  # Cloud Foundry
  - name: cf
    type: cf
    source:
      api: {{cf-api}}
      username: {{cf-username}}
      password: {{cf-password}}
      organization: {{cf-organization}}
      space: {{cf-space}}
      skip_cert_check: true

# JOBS
jobs:

  # Run Unit Tests
  - name: run-unit-tests
    serial: true
    plan:
      # Get Application
      - get: application-repo
        trigger: true
      # Get Pipeline
      - get: pipeline-repo
        trigger: true
      # Run Unit Tests
      - task: task-run-unit-tests
        file: pipeline-repo/tasks/run-unit-tests.yml
        params:
          APPLICATION_DIR: application-repo

  # Build Artifact
  - name: build-artifact
    serial: true
    plan:
      # Get Application
      - get: application-repo
        passed: [ run-unit-tests ]
        trigger: true
      # Get Pipeline
      - get: pipeline-repo
        passed: [ run-unit-tests ]
        trigger: true
      # Determine Version Number
      - get: version
        params:
          pre: rc
      # Build Artifact
      - task: task-build-artifact
        file: pipeline-repo/tasks/build-artifact.yml
        params:
          APPLICATION_DIR: application-repo
          ARTIFACT_DIR: build
          VERSION_FILE: version/number
          ARTIFACT_ID: {{artifact-id}}
          PACKAGING: {{packaging}}
      # Put Artifact into S3
      - put: release-candidate
        params:
          file: build/pcf-sb-hello-world-*.jar
      # Put Version File into S3
      - put: version
        params:
          file: version/number

  # Run Integration Tests
  - name: run-integration-tests
    serial: true
    plan:
      # Get Application
      - get: application-repo
        passed: [ build-artifact ]
        trigger: true
      # Get Pipeline
      - get: pipeline-repo
        passed: [ build-artifact ]
        trigger: true
      # Run Integration Tests
      - task: task-run-integration-tests
        file: pipeline-repo/tasks/run-integration-tests.yml
        params:
          APPLICATION_DIR: application-repo

  # Deploy Application to Cloud Foundry
  - name: deploy-application
    serial: true
    plan:
      # Get Application
      - get: application-repo
        passed: [ run-integration-tests ]
        trigger: true
      # Get Pipeline
      - get: pipeline-repo
        passed: [ run-integration-tests ]
        trigger: true
      # Get Artifact from S3
      - get: release-candidate
        passed: [ build-artifact ]
      # Get Version File from S3
      - get: version
        passed: [ build-artifact ]
      # Get Current Blue/Green App Color
      - task: get-current-app-color
        file: pipeline-repo/tasks/get-current-app-info.yml
        params:
          CF_API: {{cf-api}}
          CF_USERNAME: {{cf-username}}
          CF_PASSWORD: {{cf-password}}
          CF_ORGANIZATION: {{cf-organization}}
          CF_SPACE: {{cf-space}}
          ARTIFACT_ID: {{artifact-id}}
      # Prepare Cloud Foundry Manifest
      - task: task-prepare-app-manifest
        file: pipeline-repo/tasks/prepare-app-manifest.yml
        params:
          APPLICATION_DIR: application-repo
          ARTIFACT_DIR: release-candidate
          OUTPUT_DIR: prepare-app-manifest
          VERSION_FILE: version/number
          ARTIFACT_ID: {{artifact-id}}
          PACKAGING: {{packaging}}
      # Deploy Application to Cloud Foundry
      - put: cf
        params:
          manifest: prepare-app-manifest/manifest.yml

  # Run Load Tests
  - name: run-load-tests
    serial: true
    plan:
      # Get Application
      - get: application-repo
        passed: [ run-integration-tests ]
        trigger: true
      # Get Pipeline
      - get: pipeline-repo
        passed: [ deploy-application ]
        trigger: true
      # Get Current Blue/Green App Color
      - task: get-current-app-color
        file: pipeline-repo/tasks/get-current-app-info.yml
        params:
          CF_API: {{cf-api}}
          CF_USERNAME: {{cf-username}}
          CF_PASSWORD: {{cf-password}}
          CF_ORGANIZATION: {{cf-organization}}
          CF_SPACE: {{cf-space}}
          ARTIFACT_ID: {{artifact-id}}
      # Run Load Tests
      - task: run-load-tests
        file: pipeline-repo/tasks/run-load-tests.yml
        params:
          CF_APP_DOMAIN: {{cf-app-domain}}
          ARTIFACT_ID: {{artifact-id}}

  # Promote New Version
  - name: promote-new-version
    serial: true
    plan:
      # Get Application
      - get: application-repo
        passed: [ run-integration-tests ]
        trigger: true
      # Get Pipeline
      - get: pipeline-repo
        passed: [ run-load-tests ]
        trigger: true
      # Get Current Blue/Green App Color
      - task: get-current-app-color
        file: pipeline-repo/tasks/get-current-app-info.yml
        params:
          CF_API: {{cf-api}}
          CF_USERNAME: {{cf-username}}
          CF_PASSWORD: {{cf-password}}
          CF_ORGANIZATION: {{cf-organization}}
          CF_SPACE: {{cf-space}}
          ARTIFACT_ID: {{artifact-id}}
      # Switch Application Routes
      - task: switch-app-routes
        file: pipeline-repo/tasks/switch-app-routes.yml
        params:
          CF_API: {{cf-api}}
          CF_USERNAME: {{cf-username}}
          CF_PASSWORD: {{cf-password}}
          CF_ORGANIZATION: {{cf-organization}}
          CF_SPACE: {{cf-space}}
          CF_APP_DOMAIN: {{cf-app-domain}}
          ARTIFACT_ID: {{artifact-id}}
